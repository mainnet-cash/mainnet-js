Newest changes
--------------

2.3.16

* Add `getHeader` method to network provider
* Add `localStorage` caching behaviour to it steered by `Config.UseLocalStorageCache`
*

2.3.15

* Add `Config.UseLocalStorageCache` setting to cache fetched raw transaction data in local storage
* Fix docker image build

2.3.14

* Support many fiat currencies
* Add `Config.DefaultCurrency` setting (defaults to "usd")

2.3.11

* Better typings for wallet providers

2.3.4

This update switches mnemonics to a more modern implementation of bip39.

* Allows for custom configuration of alternative known language word lists.
* Automatic checksums for altering the configured word list.
* Removed hacks for legacy bip39 library.  

2.3.3

* Bugfix should resolve a number of accounting issues burning fungible tokens held across multiple utxos.

2.3.2


* Bugfix: remove old nodejs crypto dependency

2.3.1

* Bump libauth to v2.0.0

2.3.0

*  **BREAKING CHANGE:** Use big integers for fungible token amounts.

2.2.9

*  Add ipfs gateway config option

2.2.8

* Fix potential implicit FT Burn.

2.2.7

* Drop network from chaingraph BCMR AuthChain query.

2.2.6

* Fix behavior of watchOnly wallets for non-token v. token aware and
* Fix watching p2sh addresses.

2.2.5 

* Fix results of message validation to be clearer
* Add README to main mainnet-js package.

2.2.4 

* Export wallet interfaces
* Fix name collision with database interfaces.


2.2.3

* Load missing satoshi values for utxoids in format txid:vout

2.2.2

* Fix utxo selection when sending nfts with same commitment
* Export FeePaidByEnum

2.2.1

* Export `sumUtxoValue` and `sumTokenAmounts` utility functions

2.2.0

* Minor breaking change: node 18 is required
* Replace axios with fetch for network connectivity

2.1.1

* Reimplement ExchangeRateProvider to use localStorage instead of IndexedDB in browsers

2.1.0

* Split out IndexedDBProvider and SqlProvider from the core package into separate packages
* See migration notes in our [docs](https://mainnet.cash/tutorial/#basewallet-storageprovider)

2.0.1

* fetchAuthChainFromChaingraph allows to not constrain the network in query

2.0.0

* Breaking, this release removes SLP and SmartBCH support
* Exclude node-specific source files from webpack bundle

1.1.34

* Remove extraneous dependencies, reduce package size

1.1.33

* Fix BCMR query in case node validations are empty

1.1.32

* Reinstate platform check for webworker
* Reinstate networkPrefix in Wallet class
* Adjust fulcrum max_clients_per_ip = 50

1.1.31

* Allow for hybrid NFT+FT tokens to be splitted and merged

1.1.30

* Fetching BCMR from chaingraph checks for chain name in node validations, not block inclusions

This fixes the BCMR data not available until a new block confirmation.

1.1.29

* Fix BCMR authchains containing incompatible elements

1.1.28

* Update cashscript to latest 0.8.0

Other commit messages:

* Rework generateBlock to not use cashscript, remove older cashscript from dev dependencies
* Remove cashscript patch, update imports in template.ts
* Replace exchange rate getter with a sync method
* Add 'describe' to test suites lacking it

1.1.27

* Fix BCMR https urls for ipfs links

1.1.26

* Use model based initial fee estimation

1.1.25

* Simplify transaction estimation from 2 passes to 1
* This is a performance improvement for wallets with massive amount of utxos

1.1.24

* Fix bitauth template generation of empty data parameters, move constructor parameters into locking script
* Update cashscript to 0.8.0-next.4, add patch
* Remove cashscript from smartbch package

1.1.23

* Add new BCMR method fetchAuthChainFromChaingraph to get the autchain data from a trusted indexer
* Allows to reduce the network traffic and request amount to Fulcrum servers when resolving long authchains

1.1.22

* Remove one server from mainnet cluster

This makes mainnet-js to switch from cluster to client mode in electrum-cash.

In cluster mode multiple subscriptions to the same elecrum protocol method render all unresponsive.

This is a temporary hotfix until proper solution will be found.

1.1.21

* Remove electrum protocol version selector unnecessary after May 15 upgrade

1.1.20

* Change BCMR auth chain interface to include list of uris and a httpsUrl (see https://github.com/bitjson/chip-bcmr/issues/10)

* Minor breaking change

1.1.19

* Explicitly add `include_tokens` to a Fulcrum's `listunspent`

1.1.18

* Fix contract template generation

1.1.17

* Update cashc to 0.8.0-next.3

1.1.16

* May 15 preparation: Remove network check in getUtxos

1.1.15

* Allow to set the default derivation path for new wallets using `Config.DefaultParentDerivationPath`

1.1.14

* BCMR: content hashes follow sha256 byteorder, not reversed

1.1.13

* toCashScript: set token amount to explicit 0n if token has no FT amounts

1.1.12

* Upgrade cashscript to 0.8.0-next.3

1.1.11

* Fix FT utxo selection when spending all tokens in the same transaction

1.1.10

* Fix fungible token change calculation and input selection

1.1.9

* Fix check for token addresses in strict mode (Config.EnforceCashTokenReceiptAddresses === true)

1.1.8

* Upgrade to support BCMRv2 schema

1.1.7

* Fix docker image building

1.1.6

* Fix change address derivation and encoding

1.1.5

* Add new wallet method signUnsignedTransaction
* Fix unsigned transactions underestimate fee

1.1.4

* Fix token genesis using wrong input

1.1.3

* Fix token genesis not filtering out token inputs
* Fix source outputs lockingBytecode derivation

1.1.2

* Rework and simplify token utxo selection
* Require to always provide commitment and capability for tokens sent
* Allow to build unsigned transactions (for watch only wallets too)
Example:

```
const { unsignedTransaction, sourceOutputs } = await watchWallet.send({...}), { buildUnsigned: true });
```

Where `unsignedTransaction` is a hex-encoded serialized transaction. It will have its inputs unlocking bytecode to be empty.

`sourceOutputs` will contain the detailed information about the inputs being spent, including lockingBytecode, satoshi values and token information.
This information can be used to recreate the signing context for libauth.

1.1.1

* Add stricter token utxo selection, add 3 more cashtoken regression tests
* Fix counting FT and NFT token balances, fixes #175
* Add safeguarding check against malformed tokenIds supplied to token mint and burn functions
* Fix contract exports, fix conversion utils

1.1.0

Upgrade @mainnet-cash/contract package with new libauth and cashscript, additionally bringing full support for cashtokens in contracts.

Commit message:
```
Breaking: replace UtxoItem with UtxoI everywhere
Upgrade contract package to use cashscript 0.8.0
Upgrade libauth to 2.0.0-alpha.8
Add libauth template generation from cashscript contracts
```

Upgrade notes:
All methods returning utxos in form `{"utxos": UtxoItem[]}`:
```
{
  "utxos": [
    "txId": "abcd",
    "index": 0,
    "value": 1000
  ]
}
```

will now be returning `UtxoI[]`:
```
[
  "txid": "abcd",
  "vout": 0,
  "satoshis": 1000
]
```
This change is intended to unify interfaces and return type, and to eliminate unnecessary interfaces.

To convert UtxoI <-> UtxoId use new `toUtxoId` and `fromUtxoId` methods.

1.0.18

- Fix BCMR not instantiating network provider whenever needed
- Fix math precision errors when converting BCH to SAT

1.0.17

- Add 'parse' and 'parseBinary' methods to OpReturnData class

1.0.16

- Fix encoding OP_PUSHDATA1-sized chunks in OP_RETURNS

1.0.15

- When creating wallet from seed trim whitespace and transform to lowercase
- Allow authchains to spend parent at vin != 0

1.0.14

- Fixes a bug for handling arguments for CashScript function paths that don't take arguments

1.0.13

Address issues with BCMR support #170:
- Allow for BCMR forwards resolution with gaps (this allows to resolve token metadata by tokenId)
- Fix getMaxAmountToSend estimation with token utxos

1.0.12

Fix edge-case bug in `getTokenInfo`

1.0.11

Address issues with BCMR support #170:
- More correct way to retrieve bcmr metadata
- Add extra outputs to token genesis call, add support in rest, add tests

1.0.10

Add example projects:
- demo/react-next with webpack
- demo/vue-nuxt with vite
- demo/vue-vite

1.0.9

- mine.ts: rework child_process import for better shimming
- Rename Config's ValidateTokenAddresses to EnforceCashTokenReceiptAddresses
- Token related methods use tokeanddr if cashaddr is undefined
- Fix token commitment change error check

1.0.8

This release contains critical improvements to utxo selection preventing accidental token burns. Update to this version is highly advised.

Other changes:
- Use new electrum method to get block height
- Add `Config` object, add opt-in config option to force validate the tokenaddresses
- Add new parameter `loadInputValues` to `getRawTransaction`
- Add `watchAddressTokenTransactions`
- Reimplement `watchAddress` and `watchAddressTransactions`
- Expose cashaddr and tokenaddr utils
- Update jest setup, update to BCHN v26.0.0

1.0.7

- Upgrade the Dexie IndexedDB wrapper to version 3.2.2 due to prototype pollution in Dexie.setByKeyPath() (dexie/Dexie.js@1d655a6)

1.0.6

- Export libauth
- Allows mainnet-js users to build and encode a transaction using libauth

1.0.0

- Breaking release. Project is converted into ESM package to support our core dependency libauth v2.
- Browser package is now async and exports `__mainnetPromise` which must be awaited.
  It resolves to a module containing the usual mainnet types and functions
  To preserve the old behaviour you can change your html code in a following way:
  ```html
    <head>
      ...
      <script defer src="mainnet.js"></script>
    </head>

    <body>
      <script>document.addEventListener("DOMContentLoaded", async (event) => Object.assign(globalThis, await __mainnetPromise))</script>
      ...
    </body>
  ```
- Add BCMR support - https://github.com/bitjson/chip-bcmr
- Add CashTokens support - https://github.com/bitjson/cashtokens
  Cashtokens are available on chipnet, to connect to chipnet
    in browser and node: `DefaultProvider.servers.testnet = ["wss://chipnet.imaginary.cash:50004"]`
    in REST server set the environment variable - `export ELECTRUM_TESTNET=wss://chipnet.imaginary.cash:50004`

0.5.0 

- Update to cashscript 0.7.0
- Fixes bug with send raw transaction rest endpoint

0.4.40 

- Make electrum-cash fault tolerant to failed servers and timed-out requests.

0.4.39

- Fix "Bearer" token to be case-insensitive for php client

0.4.38 

- Switch default electrum-cash connection to using a single response from a random server in a cluster.
- Retries failed electrum-cash queries once before failing.
- upgrade libauth to 1.19.1
- upgrade electrum-cash to 2.0.10

0.4.36

- Fix changeAddress for send

0.4.35

- Add feePaidBy option for send

0.4.34

- Add rest endpoints `wallet/encode_transaction` and `wallet/submit_transaction`
- Add tests

0.4.32

- Add public transaction building and broadcasting methods
- Fix unhandled exception in getLastTransaction

0.4.31

- Add functions and endpoints to derive xpubkeys and cashaddrs from them

0.4.30

- Update mainnet explorer url to https://blockchair.com/bitcoin-cash/
- Update testnet explorer url to https://www.blockchain.com/bch-testnet/

0.4.29

- Add `slpSemiAware`: a flag which requires an utxo to have more than 546 sats to be spendable and counted in the balance

0.4.28

- Bugfix: Round down getMaxAmountToSend()

0.4.27

- Bugfix: put back web3 browser support enabling statement

0.4.26

- SmartBch wallets use https provider connection in browser

0.4.25

- Add testnet faucet for SmartBch and SEP20 tokens (visit https://rest-unstable.mainnet.cash/faucet.html)
- Add new method wallet.sep20.getAllBalances()

0.4.22

- Move demo packages
- Update webpack configuration
- Remove node packages from browser export in mainnet-js package

0.4.21

- Revert from using the new fulcrum method in wait methods
- Fix maxAmountToSend returning negative values
- Fix not submitting transaction when awaitTransactionPropagation equal to false

0.4.5

- Refactored to yarn workspaces, splitting packages into the following mono repo:
   - mainnet-js (javascript library)
   - mainnet-cash (unchanged, express server)
   - @mainnet-cash/contract (cashscript functionality)
   - @mainnet-cash/demo (demo app [WIP])
   - @mainnet-cash/smartbch (SmartBCH functionality)
- Refactored nodejs and ECMA script module to not pass through webpack
- Fixed issue with type definitions
- Switched to lazy-loading postgres.

0.4.4

- Fix regression with BCH wallet database names


0.4.3

- Fix regression with wallet database names (broken release)

0.4.2

- Rework electrum provider blockchain height tracking
- Rework and optimize waitForTransaction not to query the transaction history

0.4.1

- SmartBch: added watchAddress, watchAddressTransactions, watchBalance, watchBalanceUsd, watchBlocks,
  waitForTransaction, waitForBalance, waitForBlock methods
- BCH: reworked transaction subscriptions using new method blockchain.address.transactions.subscribe;
  added and/or reworked watchAddress, watchAddressTransactions, watchBalance, watchBalanceUsd, watchBlocks,
  waitForTransaction, waitForBalance, waitForBlock methods

0.4.0

- SmartBch support!
- Check out:
- SmartBchWallet for basic interactions with the network and sending funds
- SmartBchWallet.sep20 to interact with SEP20 (ERC20) compatible token contracts
- SmartBch.Contract - a generic interface to SmartBch smart contracts, which supports deploying from Solidity source (currently node.js only)
- REST support: https://rest-unstable.mainnet.cash/api-docs/
- Check out our documentation: https://mainnet.cash/tutorial/smartbch.html
- Join our Telegram group: https://t.me/mainnetcash

0.3.41

- Fix bug with watchOnly and retrieving some named wallets.

0.3.38

- Revert library compression compression

0.3.37

- Support library compression in production builds

0.3.36

- Add options to query balance and transaction info from waitForTransaction call

0.3.35

- Fix wrong import in wallet service

0.3.34

- Add OP_RETURN support in send() method

0.3.33

- Add SLP provider and endpoints configuration

0.3.32

- Fix SLPDB bug counting the spent outputs in child geneses

0.3.31

- Fixes bug with contract fee estimation
- Add contract/escrow/info and EscrowContract.info() interfaces
- Fix inconsistencies in contracts between docs, swagger and API

0.3.30

- Fix publishing workflow

0.3.29

- Decode transactions using libauth instead of fulcrum
- Allows for debugging transactions not yet existing on blockchain

0.3.28

- Address rest server hanging upon cluster start

0.3.26

- Fix getting exchange rates upon library load

0.3.25

- Rework electrum cash connection management
- New speed-up options for sending funds and transaction propagation
- Other performance improvements

0.3.24

- Add explorerUrl to sendResponse and slpSendResponse in node and rest #118

0.3.23

- Add Contract.info() and /contract/info for parsing contractIds

0.3.22

- Add static accessors for wallet util functions

0.3.21

- Add decodeTransaction method, tests, rest api and api tests
- Method is based on fulcrums `blockchain.transaction.get` and transaction must exist on the blockchain

0.3.20

- Add API_KEY environment variable to REST server

0.3.19

- Fix mainnet-doc publishing

0.3.18

- New wallet methods namedExists and replaceNamed

0.3.16

- Update package dependencies

0.3.15

- Removes support for SharedArrayBuffer types

0.3.14

- Redo the SLP watching/waiting callbacks to be strictly void returning. Watching/waiting cancellation is thus made explicit.
- Split up the webhook code into smaller classes
- Add support for SLP webhooks to monitor address balance and transaction activities
- Important: webhook table was altered. Existing databases should be recreated/migrated.

0.3.12

- Fix docker publishing

0.3.11

- Rework webhooks to be provider agnostic - REST can register and handle webhooks from all networks
- Fix a bug causing webhooks to not start
- Document usage of database and env variables, see `generated/serve/docker/README.md`
- Improve REST webhook tests
- Update CI workflow to run in parallel
- Update Publish workflow to run in parallel

0.3.10

- Fix deploy and pubished packages

0.3.9

- Changed nftChildGenesis interface and move parentTokenId to genesis options for consistency between js and REST.
- Added convenince constructors to create SLP aware wallets, e.g. Wallet.slp.newRandom()
- Added REST interfaces to create SLP aware wallets - wallet/slp/create
- Ensure send and sendMax methods make use of slpAware parameter

0.3.8

- Fix github actions workflow generating the REST client binding libs.

0.3.7

- Fix deploy

0.3.6

- Bump CashScript to 0.6.1
- Switch from dts-bundle-webpack to npm-dts-webpack-plugin

0.3.5

- Revert SlpDbProvider

0.3.4

- Use gspp SLP provider

0.3.3

- Added experimental support for GraphSearch++ as a backing solution for SLP functionality.
- Added mainnet.cash relevant functionality to GraphSearch++ see https://github.com/blockparty-sh/cpp_slp_graph_search/pull/20
- Added zmq to SSE bridge to GraphSearch++ to enable watching and waiting for SLP transactions
- New getSlpOutpoints and /wallet/slp/outpoints methods return compact list of SLP outpoints
- GsppProvider, thanks to its fast queries to the server, allows for SLP awareness to become a default, rather than opt-in option.
- Reworked docker-compose project sturcture, removed unnecessary port exposure
- SlpProvider's endpoints can now be customized via static accessor

0.3.1

- Fix signatureType for 'recoverable' signatures

0.3.0
-----

- message signing and verification.
- Added API for generic CashScript usage over REST.
- Added wrapper for generic CashScript via javascript.
- Switched mainnet-js dependency on REST server to a symlinked package.
- Fixed bug with fee estimation of small transactions.
- Fixed bug with docker configuration.
- Added option for sending from specific utxos to send and send max

- Optimize getBalance to use electrum blockchain.address.balance instead of utxos
- Added support for SLP and NFT tokens - create your own, send around and mint more!
- Added support for SldDb communication, allowing generic queries too.
- Regtest server now ships with SlpDb, slpserve and slpsockserve
- Fixes bug with types passed to contract 'to' field over REST
- Added ability to pass a single sendRequestItem to send()

0.2.0
-----

- remove postgres from dependencies
- added browser specific module
- get min relay fee dynamically
- Moved escrow nonce to contractId to handle nonces automatically for user
- added getInfo() wallet method and - REST Endpoint wallet/info
- Wallets default to use mnemonic phrase seed by default
- added getSeed(), fromSeed() wallet methods

...

0.1.0
-----
- New network provider methods: getHistory, getRawTransactionObject, subscribeToAddress, unsubscribeFromAddress, subscribeToHeaders, unsubscribeFromHeaders, waitForBlock
- New wallet methods: getLastTransaction, getHistory, watchBalance, waitForTransaction
- Add webhooks for watching balance and transactions - REST Endpoint /webhook/watch_address
- Add websockets for watching balance and transactions - REST Endpoint /api/v1/wallet, methods watchBalance, waitForTransaction
- General Cashscript contract serialization/deserialization
- Network providers are created in global scope (BCH, BCHt, BCHr) with the function initProviders()
- All wallets and contracts will use the global providers if available.
- Express server now uses network providers from global scope declared once at service start.
- Escrow contracts
- Express server return JSON instead of text errors.
- Named wallets now return id as "named:wif:<THE_NAME>" format
- Initial utility endpoint for currency conversion.
- Added convert utility function and supporting satoshiToAmount 
- Unit conversions are now done as numbers.
- Use stock latest openapitools/openapi-generator-cli instead of fork for local validation and building

0.0.4
-----

- Bugfix: fix function that determines if a network provider is using a electrum cluster or single electrum client.
...
