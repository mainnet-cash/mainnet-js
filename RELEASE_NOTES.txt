Newest changes
--------------

0.4.3

- Fix regression with wallet database names

0.4.2

- Rework electrum provider blockchain height tracking
- Rework and optimize waitForTransaction not to query the transaction history

0.4.1

- SmartBch: added watchAddress, watchAddressTransactions, watchBalance, watchBalanceUsd, watchBlocks,
  waitForTransaction, waitForBalance, waitForBlock methods
- BCH: reworked transaction subscriptions using new method blockchain.address.transactions.subscribe;
  added and/or reworked watchAddress, watchAddressTransactions, watchBalance, watchBalanceUsd, watchBlocks,
  waitForTransaction, waitForBalance, waitForBlock methods

0.4.0

- SmartBch support!
- Check out:
- SmartBchWallet for basic interactions with the network and sending funds
- SmartBchWallet.sep20 to interact with SEP20 (ERC20) compatible token contracts
- SmartBch.Contract - a generic interface to SmartBch smart contracts, which supports deploying from Solidity source (currently node.js only)
- REST support: https://rest-unstable.mainnet.cash/api-docs/
- Check out our documentation: https://mainnet.cash/tutorial/smartbch.html
- Join our Telegram group: https://t.me/mainnetcash

0.3.41

- Fix bug with watchOnly and retrieving some named wallets.

0.3.38

- Revert library compression compression

0.3.37

- Support library compression in production builds

0.3.36

- Add options to query balance and transaction info from waitForTransaction call

0.3.35

- Fix wrong import in wallet service

0.3.34

- Add OP_RETURN support in send() method

0.3.33

- Add SLP provider and endpoints configuration

0.3.32

- Fix SLPDB bug counting the spent outputs in child geneses

0.3.31

- Fixes bug with contract fee estimation
- Add contract/escrow/info and EscrowContract.info() interfaces
- Fix inconsistencies in contracts between docs, swagger and API

0.3.30

- Fix publishing workflow

0.3.29

- Decode transactions using libauth instead of fulcrum
- Allows for debugging transactions not yet existing on blockchain

0.3.28

- Address rest server hanging upon cluster start

0.3.26

- Fix getting exchange rates upon library load

0.3.25

- Rework electrum cash connection management
- New speed-up options for sending funds and transaction propagation
- Other performance improvements

0.3.24

- Add explorerUrl to sendResponse and slpSendResponse in node and rest #118

0.3.23

- Add Contract.info() and /contract/info for parsing contractIds

0.3.22

- Add static accessors for wallet util functions

0.3.21

- Add decodeTransaction method, tests, rest api and api tests
- Method is based on fulcrums `blockchain.transaction.get` and transaction must exist on the blockchain

0.3.20

- Add API_KEY environment variable to REST server

0.3.19

- Fix mainnet-doc publishing

0.3.18

- New wallet methods namedExists and replaceNamed

0.3.16

- Update package dependencies

0.3.15

- Removes support for SharedArrayBuffer types

0.3.14

- Redo the SLP watching/waiting callbacks to be strictly void returning. Watching/waiting cancellation is thus made explicit.
- Split up the webhook code into smaller classes
- Add support for SLP webhooks to monitor address balance and transaction activities
- Important: webhook table was altered. Existing databases should be recreated/migrated.

0.3.12

- Fix docker publishing

0.3.11

- Rework webhooks to be provider agnostic - REST can register and handle webhooks from all networks
- Fix a bug causing webhooks to not start
- Document usage of database and env variables, see `generated/serve/docker/README.md`
- Improve REST webhook tests
- Update CI workflow to run in parallel
- Update Publish workflow to run in parallel

0.3.10

- Fix deploy and pubished packages

0.3.9

- Changed nftChildGenesis interface and move parentTokenId to genesis options for consistency between js and REST.
- Added convenince constructors to create SLP aware wallets, e.g. Wallet.slp.newRandom()
- Added REST interfaces to create SLP aware wallets - wallet/slp/create
- Ensure send and sendMax methods make use of slpAware parameter

0.3.8

- Fix github actions workflow generating the REST client binding libs.

0.3.7

- Fix deploy

0.3.6

- Bump CashScript to 0.6.1
- Switch from dts-bundle-webpack to npm-dts-webpack-plugin

0.3.5

- Revert SlpDbProvider

0.3.4

- Use gspp SLP provider

0.3.3

- Added experimental support for GraphSearch++ as a backing solution for SLP functionality.
- Added mainnet.cash relevant functionality to GraphSearch++ see https://github.com/blockparty-sh/cpp_slp_graph_search/pull/20
- Added zmq to SSE bridge to GraphSearch++ to enable watching and waiting for SLP transactions
- New getSlpOutpoints and /wallet/slp/outpoints methods return compact list of SLP outpoints
- GsppProvider, thanks to its fast queries to the server, allows for SLP awareness to become a default, rather than opt-in option.
- Reworked docker-compose project sturcture, removed unnecessary port exposure
- SlpProvider's endpoints can now be customized via static accessor

0.3.1

- Fix signatureType for 'recoverable' signatures

0.3.0
-----

- message signing and verification.
- Added API for generic CashScript usage over REST.
- Added wrapper for generic CashScript via javascript.
- Switched mainnet-js dependency on REST server to a symlinked package.
- Fixed bug with fee estimation of small transactions.
- Fixed bug with docker configuration.
- Added option for sending from specific utxos to send and send max

- Optimize getBalance to use electrum blockchain.address.balance instead of utxos
- Added support for SLP and NFT tokens - create your own, send around and mint more!
- Added support for SldDb communication, allowing generic queries too.
- Regtest server now ships with SlpDb, slpserve and slpsockserve
- Fixes bug with types passed to contract 'to' field over REST
- Added ability to pass a single sendRequestItem to send()

0.2.0
-----

- remove postgres from dependencies
- added browser specific module
- get min relay fee dynamically
- Moved escrow nonce to contractId to handle nonces automatically for user
- added getInfo() wallet method and - REST Endpoint wallet/info
- Wallets default to use mnemonic phrase seed by default
- added getSeed(), fromSeed() wallet methods

...

0.1.0
-----
- New network provider methods: getHistory, getRawTransactionObject, subscribeToAddress, unsubscribeFromAddress, subscribeToHeaders, unsubscribeFromHeaders, waitForBlock
- New wallet methods: getLastTransaction, getHistory, watchBalance, waitForTransaction
- Add webhooks for watching balance and transactions - REST Endpoint /webhook/watch_address
- Add websockets for watching balance and transactions - REST Endpoint /api/v1/wallet, methods watchBalance, waitForTransaction
- General Cashscript contract serialization/deserialization
- Network providers are created in global scope (BCH, BCHt, BCHr) with the function initProviders()
- All wallets and contracts will use the global providers if available.
- Express server now uses network providers from global scope declared once at service start.
- Escrow contracts
- Express server return JSON instead of text errors.
- Named wallets now return id as "named:wif:<THE_NAME>" format
- Initial utility endpoint for currency conversion.
- Added convert utility function and supporting satoshiToAmount 
- Unit conversions are now done as numbers.
- Use stock latest openapitools/openapi-generator-cli instead of fork for local validation and building

0.0.4
-----

- Bugfix: fix function that determines if a network provider is using a electrum cluster or single electrum client.
...
